// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace k8s
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Kubernetes.
    /// </summary>
    public static partial class KubernetesExtensions
    {
            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIVersions GetAPIVersions(this IKubernetes operations)
            {
                return operations.GetAPIVersionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIVersions> GetAPIVersionsAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources(this IKubernetes operations)
            {
                return operations.GetAPIResourcesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResourcesAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list objects of kind ComponentStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1ComponentStatusList ListComponentStatus(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListComponentStatusAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list objects of kind ComponentStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ComponentStatusList> ListComponentStatusAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListComponentStatusWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ComponentStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ComponentStatus
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ComponentStatus ReadComponentStatus(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadComponentStatusAsync(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ComponentStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ComponentStatus
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ComponentStatus> ReadComponentStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadComponentStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1ConfigMapList ListConfigMapForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListConfigMapForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ConfigMapList> ListConfigMapForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigMapForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1EndpointsList ListEndpointsForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListEndpointsForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1EndpointsList> ListEndpointsForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEndpointsForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1EventList ListEventForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListEventForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1EventList> ListEventForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEventForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1LimitRangeList ListLimitRangeForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListLimitRangeForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LimitRangeList> ListLimitRangeForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListLimitRangeForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1NamespaceList ListNamespace(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespaceAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1NamespaceList> ListNamespaceAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespaceWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace CreateNamespace(this IKubernetes operations, V1Namespace body, string pretty = default(string))
            {
                return operations.CreateNamespaceAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> CreateNamespaceAsync(this IKubernetes operations, V1Namespace body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespaceWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespace(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespaceAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespaceAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespaceWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Binding CreateNamespacedBinding(this IKubernetes operations, V1Binding body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedBindingAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Binding> CreateNamespacedBindingAsync(this IKubernetes operations, V1Binding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedBindingWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ConfigMapList ListNamespacedConfigMap(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedConfigMapAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ConfigMapList> ListNamespacedConfigMapAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ConfigMap CreateNamespacedConfigMap(this IKubernetes operations, V1ConfigMap body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedConfigMapAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ConfigMap> CreateNamespacedConfigMapAsync(this IKubernetes operations, V1ConfigMap body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedConfigMapWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedConfigMap(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedConfigMapAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedConfigMapAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ConfigMap ReadNamespacedConfigMap(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedConfigMapAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ConfigMap> ReadNamespacedConfigMapAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ConfigMap ReplaceNamespacedConfigMap(this IKubernetes operations, V1ConfigMap body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedConfigMapAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ConfigMap> ReplaceNamespacedConfigMapAsync(this IKubernetes operations, V1ConfigMap body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedConfigMap(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedConfigMapAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedConfigMapAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ConfigMap PatchNamespacedConfigMap(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedConfigMapAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ConfigMap
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ConfigMap
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ConfigMap> PatchNamespacedConfigMapAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1EndpointsList ListNamespacedEndpoints(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedEndpointsAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1EndpointsList> ListNamespacedEndpointsAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Endpoints CreateNamespacedEndpoints(this IKubernetes operations, V1Endpoints body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedEndpointsAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Endpoints> CreateNamespacedEndpointsAsync(this IKubernetes operations, V1Endpoints body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedEndpointsWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedEndpoints(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedEndpointsAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedEndpointsAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Endpoints ReadNamespacedEndpoints(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedEndpointsAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Endpoints> ReadNamespacedEndpointsAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Endpoints ReplaceNamespacedEndpoints(this IKubernetes operations, V1Endpoints body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedEndpointsAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Endpoints> ReplaceNamespacedEndpointsAsync(this IKubernetes operations, V1Endpoints body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedEndpoints(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedEndpointsAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedEndpointsAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Endpoints PatchNamespacedEndpoints(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedEndpointsAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Endpoints
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Endpoints> PatchNamespacedEndpointsAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1EventList ListNamespacedEvent(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedEventAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1EventList> ListNamespacedEventAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedEventWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Event CreateNamespacedEvent(this IKubernetes operations, V1Event body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedEventAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Event> CreateNamespacedEventAsync(this IKubernetes operations, V1Event body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedEventWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedEvent(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedEventAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedEventAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedEventWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Event ReadNamespacedEvent(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedEventAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Event> ReadNamespacedEventAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedEventWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Event ReplaceNamespacedEvent(this IKubernetes operations, V1Event body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedEventAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Event> ReplaceNamespacedEventAsync(this IKubernetes operations, V1Event body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedEvent(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedEventAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete an Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedEventAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Event PatchNamespacedEvent(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedEventAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Event
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Event
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Event> PatchNamespacedEventAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1LimitRangeList ListNamespacedLimitRange(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedLimitRangeAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LimitRangeList> ListNamespacedLimitRangeAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1LimitRange CreateNamespacedLimitRange(this IKubernetes operations, V1LimitRange body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedLimitRangeAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LimitRange> CreateNamespacedLimitRangeAsync(this IKubernetes operations, V1LimitRange body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedLimitRangeWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedLimitRange(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedLimitRangeAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedLimitRangeAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1LimitRange ReadNamespacedLimitRange(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedLimitRangeAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LimitRange> ReadNamespacedLimitRangeAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1LimitRange ReplaceNamespacedLimitRange(this IKubernetes operations, V1LimitRange body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedLimitRangeAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LimitRange> ReplaceNamespacedLimitRangeAsync(this IKubernetes operations, V1LimitRange body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedLimitRange(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedLimitRangeAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedLimitRangeAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1LimitRange PatchNamespacedLimitRange(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedLimitRangeAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified LimitRange
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the LimitRange
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LimitRange> PatchNamespacedLimitRangeAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedPersistentVolumeClaimAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim CreateNamespacedPersistentVolumeClaim(this IKubernetes operations, V1PersistentVolumeClaim body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedPersistentVolumeClaimAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> CreateNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, V1PersistentVolumeClaim body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedPersistentVolumeClaim(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedPersistentVolumeClaimAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaim(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedPersistentVolumeClaimAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaim(this IKubernetes operations, V1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPersistentVolumeClaimAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, V1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedPersistentVolumeClaim(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedPersistentVolumeClaimAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaim(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPersistentVolumeClaimAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaimStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedPersistentVolumeClaimStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaimStatus(this IKubernetes operations, V1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPersistentVolumeClaimStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimStatusAsync(this IKubernetes operations, V1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaimStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPersistentVolumeClaimStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolumeClaim
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PodList ListNamespacedPod(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedPodAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodList> ListNamespacedPodAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedPodWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod CreateNamespacedPod(this IKubernetes operations, V1Pod body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedPodAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> CreateNamespacedPodAsync(this IKubernetes operations, V1Pod body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedPodWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedPod(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedPodAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedPodAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedPodWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod ReadNamespacedPod(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedPodAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> ReadNamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod ReplaceNamespacedPod(this IKubernetes operations, V1Pod body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPodAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> ReplaceNamespacedPodAsync(this IKubernetes operations, V1Pod body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedPod(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedPodAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedPodAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod PatchNamespacedPod(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPodAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> PatchNamespacedPodAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to attach of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container in which to execute the command. Defaults to only container
            /// if there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Stderr if true indicates that stderr is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='stdin'>
            /// Stdin if true, redirects the standard input stream of the pod for this
            /// call. Defaults to false.
            /// </param>
            /// <param name='stdout'>
            /// Stdout if true indicates that stdout is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the attach call.
            /// This is passed through the container runtime so the tty is allocated on the
            /// worker node by the container runtime. Defaults to false.
            /// </param>
            public static string ConnectGetNamespacedPodAttach(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?))
            {
                return operations.ConnectGetNamespacedPodAttachAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to attach of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container in which to execute the command. Defaults to only container
            /// if there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Stderr if true indicates that stderr is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='stdin'>
            /// Stdin if true, redirects the standard input stream of the pod for this
            /// call. Defaults to false.
            /// </param>
            /// <param name='stdout'>
            /// Stdout if true indicates that stdout is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the attach call.
            /// This is passed through the container runtime so the tty is allocated on the
            /// worker node by the container runtime. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedPodAttachAsync(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to attach of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container in which to execute the command. Defaults to only container
            /// if there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Stderr if true indicates that stderr is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='stdin'>
            /// Stdin if true, redirects the standard input stream of the pod for this
            /// call. Defaults to false.
            /// </param>
            /// <param name='stdout'>
            /// Stdout if true indicates that stdout is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the attach call.
            /// This is passed through the container runtime so the tty is allocated on the
            /// worker node by the container runtime. Defaults to false.
            /// </param>
            public static string ConnectPostNamespacedPodAttach(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?))
            {
                return operations.ConnectPostNamespacedPodAttachAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to attach of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container in which to execute the command. Defaults to only container
            /// if there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Stderr if true indicates that stderr is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='stdin'>
            /// Stdin if true, redirects the standard input stream of the pod for this
            /// call. Defaults to false.
            /// </param>
            /// <param name='stdout'>
            /// Stdout if true indicates that stdout is to be redirected for the attach
            /// call. Defaults to true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the attach call.
            /// This is passed through the container runtime so the tty is allocated on the
            /// worker node by the container runtime. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedPodAttachAsync(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create binding of a Binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Binding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Binding CreateNamespacedBindingBinding(this IKubernetes operations, V1Binding body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedBindingBindingAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create binding of a Binding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Binding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Binding> CreateNamespacedBindingBindingAsync(this IKubernetes operations, V1Binding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedBindingBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create eviction of an Eviction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Eviction
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Eviction CreateNamespacedEvictionEviction(this IKubernetes operations, V1beta1Eviction body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedEvictionEvictionAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create eviction of an Eviction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Eviction
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Eviction> CreateNamespacedEvictionEvictionAsync(this IKubernetes operations, V1beta1Eviction body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedEvictionEvictionWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to exec of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='command'>
            /// Command is the remote command to execute. argv array. Not executed within a
            /// shell.
            /// </param>
            /// <param name='container'>
            /// Container in which to execute the command. Defaults to only container if
            /// there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Redirect the standard error stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='stdin'>
            /// Redirect the standard input stream of the pod for this call. Defaults to
            /// false.
            /// </param>
            /// <param name='stdout'>
            /// Redirect the standard output stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the exec call.
            /// Defaults to false.
            /// </param>
            public static string ConnectGetNamespacedPodExec(this IKubernetes operations, string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?))
            {
                return operations.ConnectGetNamespacedPodExecAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to exec of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='command'>
            /// Command is the remote command to execute. argv array. Not executed within a
            /// shell.
            /// </param>
            /// <param name='container'>
            /// Container in which to execute the command. Defaults to only container if
            /// there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Redirect the standard error stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='stdin'>
            /// Redirect the standard input stream of the pod for this call. Defaults to
            /// false.
            /// </param>
            /// <param name='stdout'>
            /// Redirect the standard output stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the exec call.
            /// Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedPodExecAsync(this IKubernetes operations, string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to exec of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='command'>
            /// Command is the remote command to execute. argv array. Not executed within a
            /// shell.
            /// </param>
            /// <param name='container'>
            /// Container in which to execute the command. Defaults to only container if
            /// there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Redirect the standard error stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='stdin'>
            /// Redirect the standard input stream of the pod for this call. Defaults to
            /// false.
            /// </param>
            /// <param name='stdout'>
            /// Redirect the standard output stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the exec call.
            /// Defaults to false.
            /// </param>
            public static string ConnectPostNamespacedPodExec(this IKubernetes operations, string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?))
            {
                return operations.ConnectPostNamespacedPodExecAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to exec of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='command'>
            /// Command is the remote command to execute. argv array. Not executed within a
            /// shell.
            /// </param>
            /// <param name='container'>
            /// Container in which to execute the command. Defaults to only container if
            /// there is only one container in the pod.
            /// </param>
            /// <param name='stderr'>
            /// Redirect the standard error stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='stdin'>
            /// Redirect the standard input stream of the pod for this call. Defaults to
            /// false.
            /// </param>
            /// <param name='stdout'>
            /// Redirect the standard output stream of the pod for this call. Defaults to
            /// true.
            /// </param>
            /// <param name='tty'>
            /// TTY if true indicates that a tty will be allocated for the exec call.
            /// Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedPodExecAsync(this IKubernetes operations, string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read log of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container for which to stream logs. Defaults to only container if there
            /// is one container in the pod.
            /// </param>
            /// <param name='follow'>
            /// Follow the log stream of the pod. Defaults to false.
            /// </param>
            /// <param name='limitBytes'>
            /// If set, the number of bytes to read from the server before terminating the
            /// log output. This may not display a complete final line of logging, and may
            /// return slightly more or slightly less than the specified limit.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='previous'>
            /// Return previous terminated container logs. Defaults to false.
            /// </param>
            /// <param name='sinceSeconds'>
            /// A relative time in seconds before the current time from which to show logs.
            /// If this value precedes the time a pod was started, only logs since the pod
            /// start will be returned. If this value is in the future, no logs will be
            /// returned. Only one of sinceSeconds or sinceTime may be specified.
            /// </param>
            /// <param name='tailLines'>
            /// If set, the number of lines from the end of the logs to show. If not
            /// specified, logs are shown from the creation of the container or
            /// sinceSeconds or sinceTime
            /// </param>
            /// <param name='timestamps'>
            /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every
            /// line of log output. Defaults to false.
            /// </param>
            public static string ReadNamespacedPodLog(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?))
            {
                return operations.ReadNamespacedPodLogAsync(name, namespaceParameter, container, follow, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read log of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='container'>
            /// The container for which to stream logs. Defaults to only container if there
            /// is one container in the pod.
            /// </param>
            /// <param name='follow'>
            /// Follow the log stream of the pod. Defaults to false.
            /// </param>
            /// <param name='limitBytes'>
            /// If set, the number of bytes to read from the server before terminating the
            /// log output. This may not display a complete final line of logging, and may
            /// return slightly more or slightly less than the specified limit.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='previous'>
            /// Return previous terminated container logs. Defaults to false.
            /// </param>
            /// <param name='sinceSeconds'>
            /// A relative time in seconds before the current time from which to show logs.
            /// If this value precedes the time a pod was started, only logs since the pod
            /// start will be returned. If this value is in the future, no logs will be
            /// returned. Only one of sinceSeconds or sinceTime may be specified.
            /// </param>
            /// <param name='tailLines'>
            /// If set, the number of lines from the end of the logs to show. If not
            /// specified, logs are shown from the creation of the container or
            /// sinceSeconds or sinceTime
            /// </param>
            /// <param name='timestamps'>
            /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every
            /// line of log output. Defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ReadNamespacedPodLogAsync(this IKubernetes operations, string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodLogWithHttpMessagesAsync(name, namespaceParameter, container, follow, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to portforward of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='ports'>
            /// List of ports to forward Required when using WebSockets
            /// </param>
            public static string ConnectGetNamespacedPodPortforward(this IKubernetes operations, string name, string namespaceParameter, int? ports = default(int?))
            {
                return operations.ConnectGetNamespacedPodPortforwardAsync(name, namespaceParameter, ports).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to portforward of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='ports'>
            /// List of ports to forward Required when using WebSockets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedPodPortforwardAsync(this IKubernetes operations, string name, string namespaceParameter, int? ports = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to portforward of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='ports'>
            /// List of ports to forward Required when using WebSockets
            /// </param>
            public static string ConnectPostNamespacedPodPortforward(this IKubernetes operations, string name, string namespaceParameter, int? ports = default(int?))
            {
                return operations.ConnectPostNamespacedPodPortforwardAsync(name, namespaceParameter, ports).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to portforward of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='ports'>
            /// List of ports to forward Required when using WebSockets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedPodPortforwardAsync(this IKubernetes operations, string name, string namespaceParameter, int? ports = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectGetNamespacedPodProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectGetNamespacedPodProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectPutNamespacedPodProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectPutNamespacedPodProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect PUT requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPutNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPutNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectPostNamespacedPodProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectPostNamespacedPodProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectDeleteNamespacedPodProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectDeleteNamespacedPodProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect DELETE requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectDeleteNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectDeleteNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectHeadNamespacedPodProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectHeadNamespacedPodProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect HEAD requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectHeadNamespacedPodProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectHeadNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectGetNamespacedPodProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectGetNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectPutNamespacedPodProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectPutNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect PUT requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPutNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPutNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectPostNamespacedPodProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectPostNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectDeleteNamespacedPodProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectDeleteNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect DELETE requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectDeleteNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectDeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            public static string ConnectHeadNamespacedPodProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectHeadNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect HEAD requests to proxy of Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to pod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectHeadNamespacedPodProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectHeadNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod ReadNamespacedPodStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedPodStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> ReadNamespacedPodStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod ReplaceNamespacedPodStatus(this IKubernetes operations, V1Pod body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPodStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> ReplaceNamespacedPodStatusAsync(this IKubernetes operations, V1Pod body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Pod PatchNamespacedPodStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPodStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Pod> PatchNamespacedPodStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PodTemplateList ListNamespacedPodTemplate(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedPodTemplateAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodTemplateList> ListNamespacedPodTemplateAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PodTemplate CreateNamespacedPodTemplate(this IKubernetes operations, V1PodTemplate body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedPodTemplateAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodTemplate> CreateNamespacedPodTemplateAsync(this IKubernetes operations, V1PodTemplate body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedPodTemplateWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedPodTemplate(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedPodTemplateAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedPodTemplateAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PodTemplate ReadNamespacedPodTemplate(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedPodTemplateAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodTemplate> ReadNamespacedPodTemplateAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PodTemplate ReplaceNamespacedPodTemplate(this IKubernetes operations, V1PodTemplate body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPodTemplateAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodTemplate> ReplaceNamespacedPodTemplateAsync(this IKubernetes operations, V1PodTemplate body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedPodTemplate(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedPodTemplateAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedPodTemplateAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PodTemplate PatchNamespacedPodTemplate(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPodTemplateAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodTemplate
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodTemplate> PatchNamespacedPodTemplateAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationControllerList ListNamespacedReplicationController(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedReplicationControllerAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationControllerList> ListNamespacedReplicationControllerAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController CreateNamespacedReplicationController(this IKubernetes operations, V1ReplicationController body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedReplicationControllerAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> CreateNamespacedReplicationControllerAsync(this IKubernetes operations, V1ReplicationController body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedReplicationControllerWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedReplicationController(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedReplicationControllerAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedReplicationControllerAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController ReadNamespacedReplicationController(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedReplicationControllerAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> ReadNamespacedReplicationControllerAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController ReplaceNamespacedReplicationController(this IKubernetes operations, V1ReplicationController body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedReplicationControllerAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> ReplaceNamespacedReplicationControllerAsync(this IKubernetes operations, V1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedReplicationController(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedReplicationControllerAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedReplicationControllerAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController PatchNamespacedReplicationController(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedReplicationControllerAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> PatchNamespacedReplicationControllerAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Scale ReadNamespacedScaleScale(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedScaleScaleAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Scale> ReadNamespacedScaleScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedScaleScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Scale ReplaceNamespacedScaleScale(this IKubernetes operations, V1Scale body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedScaleScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Scale> ReplaceNamespacedScaleScaleAsync(this IKubernetes operations, V1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedScaleScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Scale PatchNamespacedScaleScale(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedScaleScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Scale> PatchNamespacedScaleScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedScaleScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController ReadNamespacedReplicationControllerStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedReplicationControllerStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> ReadNamespacedReplicationControllerStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedReplicationControllerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController ReplaceNamespacedReplicationControllerStatus(this IKubernetes operations, V1ReplicationController body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedReplicationControllerStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> ReplaceNamespacedReplicationControllerStatusAsync(this IKubernetes operations, V1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ReplicationController PatchNamespacedReplicationControllerStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedReplicationControllerStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicationController
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationController> PatchNamespacedReplicationControllerStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuotaList ListNamespacedResourceQuota(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedResourceQuotaAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuotaList> ListNamespacedResourceQuotaAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota CreateNamespacedResourceQuota(this IKubernetes operations, V1ResourceQuota body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedResourceQuotaAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> CreateNamespacedResourceQuotaAsync(this IKubernetes operations, V1ResourceQuota body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedResourceQuotaWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedResourceQuota(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedResourceQuotaAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedResourceQuotaAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota ReadNamespacedResourceQuota(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedResourceQuotaAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> ReadNamespacedResourceQuotaAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota ReplaceNamespacedResourceQuota(this IKubernetes operations, V1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedResourceQuotaAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaAsync(this IKubernetes operations, V1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedResourceQuota(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedResourceQuotaAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedResourceQuotaAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota PatchNamespacedResourceQuota(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedResourceQuotaAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> PatchNamespacedResourceQuotaAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota ReadNamespacedResourceQuotaStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedResourceQuotaStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> ReadNamespacedResourceQuotaStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedResourceQuotaStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota ReplaceNamespacedResourceQuotaStatus(this IKubernetes operations, V1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedResourceQuotaStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaStatusAsync(this IKubernetes operations, V1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ResourceQuota PatchNamespacedResourceQuotaStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedResourceQuotaStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ResourceQuota
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuota> PatchNamespacedResourceQuotaStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1SecretList ListNamespacedSecret(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedSecretAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1SecretList> ListNamespacedSecretAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedSecretWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Secret CreateNamespacedSecret(this IKubernetes operations, V1Secret body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedSecretAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Secret> CreateNamespacedSecretAsync(this IKubernetes operations, V1Secret body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedSecretWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedSecret(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedSecretAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedSecretAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedSecretWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Secret ReadNamespacedSecret(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedSecretAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Secret> ReadNamespacedSecretAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Secret ReplaceNamespacedSecret(this IKubernetes operations, V1Secret body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedSecretAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Secret> ReplaceNamespacedSecretAsync(this IKubernetes operations, V1Secret body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedSecret(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedSecretAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedSecretAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Secret PatchNamespacedSecret(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedSecretAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Secret
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Secret> PatchNamespacedSecretAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ServiceAccountList ListNamespacedServiceAccount(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedServiceAccountAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceAccountList> ListNamespacedServiceAccountAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ServiceAccount CreateNamespacedServiceAccount(this IKubernetes operations, V1ServiceAccount body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedServiceAccountAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceAccount> CreateNamespacedServiceAccountAsync(this IKubernetes operations, V1ServiceAccount body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedServiceAccountWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedServiceAccount(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedServiceAccountAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedServiceAccountAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ServiceAccount ReadNamespacedServiceAccount(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedServiceAccountAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceAccount> ReadNamespacedServiceAccountAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ServiceAccount ReplaceNamespacedServiceAccount(this IKubernetes operations, V1ServiceAccount body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedServiceAccountAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceAccount> ReplaceNamespacedServiceAccountAsync(this IKubernetes operations, V1ServiceAccount body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedServiceAccount(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedServiceAccountAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedServiceAccountAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ServiceAccount PatchNamespacedServiceAccount(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedServiceAccountAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ServiceAccount
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceAccount> PatchNamespacedServiceAccountAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1ServiceList ListNamespacedService(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedServiceAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceList> ListNamespacedServiceAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedServiceWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service CreateNamespacedService(this IKubernetes operations, V1Service body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedServiceAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> CreateNamespacedServiceAsync(this IKubernetes operations, V1Service body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedServiceWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service ReadNamespacedService(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedServiceAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> ReadNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service ReplaceNamespacedService(this IKubernetes operations, V1Service body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedServiceAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> ReplaceNamespacedServiceAsync(this IKubernetes operations, V1Service body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedService(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.DeleteNamespacedServiceAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service PatchNamespacedService(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedServiceAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> PatchNamespacedServiceAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectGetNamespacedServiceProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectGetNamespacedServiceProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectPutNamespacedServiceProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectPutNamespacedServiceProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect PUT requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPutNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPutNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectPostNamespacedServiceProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectPostNamespacedServiceProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectDeleteNamespacedServiceProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectDeleteNamespacedServiceProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect DELETE requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectDeleteNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectDeleteNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectHeadNamespacedServiceProxy(this IKubernetes operations, string name, string namespaceParameter, string path = default(string))
            {
                return operations.ConnectHeadNamespacedServiceProxyAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect HEAD requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectHeadNamespacedServiceProxyAsync(this IKubernetes operations, string name, string namespaceParameter, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectHeadNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectGetNamespacedServiceProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectGetNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectPutNamespacedServiceProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectPutNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect PUT requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPutNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPutNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectPostNamespacedServiceProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectPostNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectDeleteNamespacedServiceProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectDeleteNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect DELETE requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectDeleteNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectDeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            public static string ConnectHeadNamespacedServiceProxyWithPath(this IKubernetes operations, string name, string namespaceParameter, string path, string path1)
            {
                return operations.ConnectHeadNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect HEAD requests to proxy of Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the part of URLs that include service endpoints, suffixes, and
            /// parameters to use for the current proxy request to service. For example,
            /// the whole request URL is
            /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            /// Path is _search?q=user:kimchy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectHeadNamespacedServiceProxyWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectHeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service ReadNamespacedServiceStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedServiceStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> ReadNamespacedServiceStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedServiceStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service ReplaceNamespacedServiceStatus(this IKubernetes operations, V1Service body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedServiceStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> ReplaceNamespacedServiceStatusAsync(this IKubernetes operations, V1Service body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Service PatchNamespacedServiceStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedServiceStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Service> PatchNamespacedServiceStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace ReadNamespace(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespaceAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> ReadNamespaceAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespaceWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace ReplaceNamespace(this IKubernetes operations, V1Namespace body, string name, string pretty = default(string))
            {
                return operations.ReplaceNamespaceAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> ReplaceNamespaceAsync(this IKubernetes operations, V1Namespace body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespaceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespace(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespaceAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespaceAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespaceWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace PatchNamespace(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchNamespaceAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> PatchNamespaceAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespaceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace finalize of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace ReplaceNamespaceFinalize(this IKubernetes operations, V1Namespace body, string name, string pretty = default(string))
            {
                return operations.ReplaceNamespaceFinalizeAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace finalize of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> ReplaceNamespaceFinalizeAsync(this IKubernetes operations, V1Namespace body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespaceFinalizeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace ReadNamespaceStatus(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadNamespaceStatusAsync(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> ReadNamespaceStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespaceStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace ReplaceNamespaceStatus(this IKubernetes operations, V1Namespace body, string name, string pretty = default(string))
            {
                return operations.ReplaceNamespaceStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> ReplaceNamespaceStatusAsync(this IKubernetes operations, V1Namespace body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespaceStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Namespace PatchNamespaceStatus(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchNamespaceStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Namespace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Namespace
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Namespace> PatchNamespaceStatusAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespaceStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1NodeList ListNode(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNodeAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1NodeList> ListNodeAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNodeWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node CreateNode(this IKubernetes operations, V1Node body, string pretty = default(string))
            {
                return operations.CreateNodeAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> CreateNodeAsync(this IKubernetes operations, V1Node body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNodeWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNode(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNodeAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNodeAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNodeWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node ReadNode(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNodeAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> ReadNodeAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNodeWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node ReplaceNode(this IKubernetes operations, V1Node body, string name, string pretty = default(string))
            {
                return operations.ReplaceNodeAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> ReplaceNodeAsync(this IKubernetes operations, V1Node body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNodeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNode(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNodeAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNodeAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNodeWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node PatchNode(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchNodeAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> PatchNodeAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNodeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectGetNodeProxy(this IKubernetes operations, string name, string path = default(string))
            {
                return operations.ConnectGetNodeProxyAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectPutNodeProxy(this IKubernetes operations, string name, string path = default(string))
            {
                return operations.ConnectPutNodeProxyAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect PUT requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPutNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPutNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectPostNodeProxy(this IKubernetes operations, string name, string path = default(string))
            {
                return operations.ConnectPostNodeProxyAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectDeleteNodeProxy(this IKubernetes operations, string name, string path = default(string))
            {
                return operations.ConnectDeleteNodeProxyAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect DELETE requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectDeleteNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectDeleteNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectHeadNodeProxy(this IKubernetes operations, string name, string path = default(string))
            {
                return operations.ConnectHeadNodeProxyAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect HEAD requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectHeadNodeProxyAsync(this IKubernetes operations, string name, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectHeadNodeProxyWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect GET requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectGetNodeProxyWithPath(this IKubernetes operations, string name, string path, string path1)
            {
                return operations.ConnectGetNodeProxyWithPathAsync(name, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect GET requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectGetNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectGetNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect PUT requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectPutNodeProxyWithPath(this IKubernetes operations, string name, string path, string path1)
            {
                return operations.ConnectPutNodeProxyWithPathAsync(name, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect PUT requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPutNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPutNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect POST requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectPostNodeProxyWithPath(this IKubernetes operations, string name, string path, string path1)
            {
                return operations.ConnectPostNodeProxyWithPathAsync(name, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect POST requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectPostNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectPostNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect DELETE requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectDeleteNodeProxyWithPath(this IKubernetes operations, string name, string path, string path1)
            {
                return operations.ConnectDeleteNodeProxyWithPathAsync(name, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect DELETE requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectDeleteNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectDeleteNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// connect HEAD requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            public static string ConnectHeadNodeProxyWithPath(this IKubernetes operations, string name, string path, string path1)
            {
                return operations.ConnectHeadNodeProxyWithPathAsync(name, path, path1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// connect HEAD requests to proxy of Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='path1'>
            /// Path is the URL path to use for the current proxy request to node.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ConnectHeadNodeProxyWithPathAsync(this IKubernetes operations, string name, string path, string path1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectHeadNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node ReadNodeStatus(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadNodeStatusAsync(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> ReadNodeStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNodeStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node ReplaceNodeStatus(this IKubernetes operations, V1Node body, string name, string pretty = default(string))
            {
                return operations.ReplaceNodeStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> ReplaceNodeStatusAsync(this IKubernetes operations, V1Node body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNodeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Node PatchNodeStatus(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchNodeStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Node> PatchNodeStatusAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNodeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1PersistentVolumeClaimList ListPersistentVolumeClaimForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListPersistentVolumeClaimForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolumeClaim
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeClaimList> ListPersistentVolumeClaimForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolumeList ListPersistentVolume(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListPersistentVolumeAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolumeList> ListPersistentVolumeAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPersistentVolumeWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume CreatePersistentVolume(this IKubernetes operations, V1PersistentVolume body, string pretty = default(string))
            {
                return operations.CreatePersistentVolumeAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> CreatePersistentVolumeAsync(this IKubernetes operations, V1PersistentVolume body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePersistentVolumeWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionPersistentVolume(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionPersistentVolumeAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionPersistentVolumeAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionPersistentVolumeWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume ReadPersistentVolume(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadPersistentVolumeAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> ReadPersistentVolumeAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadPersistentVolumeWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume ReplacePersistentVolume(this IKubernetes operations, V1PersistentVolume body, string name, string pretty = default(string))
            {
                return operations.ReplacePersistentVolumeAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> ReplacePersistentVolumeAsync(this IKubernetes operations, V1PersistentVolume body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePersistentVolumeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeletePersistentVolume(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeletePersistentVolumeAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeletePersistentVolumeAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersistentVolumeWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume PatchPersistentVolume(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchPersistentVolumeAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> PatchPersistentVolumeAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPersistentVolumeWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume ReadPersistentVolumeStatus(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadPersistentVolumeStatusAsync(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> ReadPersistentVolumeStatusAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadPersistentVolumeStatusWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume ReplacePersistentVolumeStatus(this IKubernetes operations, V1PersistentVolume body, string name, string pretty = default(string))
            {
                return operations.ReplacePersistentVolumeStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> ReplacePersistentVolumeStatusAsync(this IKubernetes operations, V1PersistentVolume body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePersistentVolumeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1PersistentVolume PatchPersistentVolumeStatus(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchPersistentVolumeStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified PersistentVolume
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PersistentVolume
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PersistentVolume> PatchPersistentVolumeStatusAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPersistentVolumeStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1PodList ListPodForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListPodForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodList> ListPodForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPodForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1PodTemplateList ListPodTemplateForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListPodTemplateForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodTemplate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1PodTemplateList> ListPodTemplateForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPodTemplateForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy GET requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyGETNamespacedPod(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyGETNamespacedPodAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy GET requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyGETNamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyGETNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PUT requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyPUTNamespacedPod(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyPUTNamespacedPodAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PUT requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPUTNamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPUTNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy POST requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyPOSTNamespacedPod(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyPOSTNamespacedPodAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy POST requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPOSTNamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPOSTNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy DELETE requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyDELETENamespacedPod(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyDELETENamespacedPodAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy DELETE requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyDELETENamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyDELETENamespacedPodWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy HEAD requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyHEADNamespacedPod(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyHEADNamespacedPodAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy HEAD requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyHEADNamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyHEADNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PATCH requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyPATCHNamespacedPod(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyPATCHNamespacedPodAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PATCH requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPATCHNamespacedPodAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPATCHNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy GET requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyGETNamespacedPodWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyGETNamespacedPodWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy GET requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyGETNamespacedPodWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyGETNamespacedPodWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PUT requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPUTNamespacedPodWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyPUTNamespacedPodWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PUT requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPUTNamespacedPodWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPUTNamespacedPodWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy POST requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPOSTNamespacedPodWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyPOSTNamespacedPodWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy POST requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPOSTNamespacedPodWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPOSTNamespacedPodWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy DELETE requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyDELETENamespacedPodWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyDELETENamespacedPodWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy DELETE requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyDELETENamespacedPodWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyDELETENamespacedPodWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy HEAD requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyHEADNamespacedPodWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyHEADNamespacedPodWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy HEAD requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyHEADNamespacedPodWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyHEADNamespacedPodWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PATCH requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPATCHNamespacedPodWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyPATCHNamespacedPodWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PATCH requests to Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Pod
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPATCHNamespacedPodWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPATCHNamespacedPodWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy GET requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyGETNamespacedService(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyGETNamespacedServiceAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy GET requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyGETNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyGETNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PUT requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyPUTNamespacedService(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyPUTNamespacedServiceAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PUT requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPUTNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPUTNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy POST requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyPOSTNamespacedService(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyPOSTNamespacedServiceAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy POST requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPOSTNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPOSTNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy DELETE requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyDELETENamespacedService(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyDELETENamespacedServiceAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy DELETE requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyDELETENamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyDELETENamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy HEAD requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyHEADNamespacedService(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyHEADNamespacedServiceAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy HEAD requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyHEADNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyHEADNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PATCH requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            public static string ProxyPATCHNamespacedService(this IKubernetes operations, string name, string namespaceParameter)
            {
                return operations.ProxyPATCHNamespacedServiceAsync(name, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PATCH requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPATCHNamespacedServiceAsync(this IKubernetes operations, string name, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPATCHNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy GET requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyGETNamespacedServiceWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyGETNamespacedServiceWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy GET requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyGETNamespacedServiceWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyGETNamespacedServiceWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PUT requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPUTNamespacedServiceWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyPUTNamespacedServiceWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PUT requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPUTNamespacedServiceWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPUTNamespacedServiceWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy POST requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPOSTNamespacedServiceWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyPOSTNamespacedServiceWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy POST requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPOSTNamespacedServiceWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPOSTNamespacedServiceWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy DELETE requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyDELETENamespacedServiceWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyDELETENamespacedServiceWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy DELETE requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyDELETENamespacedServiceWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyDELETENamespacedServiceWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy HEAD requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyHEADNamespacedServiceWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyHEADNamespacedServiceWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy HEAD requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyHEADNamespacedServiceWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyHEADNamespacedServiceWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PATCH requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPATCHNamespacedServiceWithPath(this IKubernetes operations, string name, string namespaceParameter, string path)
            {
                return operations.ProxyPATCHNamespacedServiceWithPathAsync(name, namespaceParameter, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PATCH requests to Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Service
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPATCHNamespacedServiceWithPathAsync(this IKubernetes operations, string name, string namespaceParameter, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPATCHNamespacedServiceWithPathWithHttpMessagesAsync(name, namespaceParameter, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy GET requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            public static string ProxyGETNode(this IKubernetes operations, string name)
            {
                return operations.ProxyGETNodeAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy GET requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyGETNodeAsync(this IKubernetes operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyGETNodeWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PUT requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            public static string ProxyPUTNode(this IKubernetes operations, string name)
            {
                return operations.ProxyPUTNodeAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PUT requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPUTNodeAsync(this IKubernetes operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPUTNodeWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy POST requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            public static string ProxyPOSTNode(this IKubernetes operations, string name)
            {
                return operations.ProxyPOSTNodeAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy POST requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPOSTNodeAsync(this IKubernetes operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPOSTNodeWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy DELETE requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            public static string ProxyDELETENode(this IKubernetes operations, string name)
            {
                return operations.ProxyDELETENodeAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy DELETE requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyDELETENodeAsync(this IKubernetes operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyDELETENodeWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy HEAD requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            public static string ProxyHEADNode(this IKubernetes operations, string name)
            {
                return operations.ProxyHEADNodeAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy HEAD requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyHEADNodeAsync(this IKubernetes operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyHEADNodeWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PATCH requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            public static string ProxyPATCHNode(this IKubernetes operations, string name)
            {
                return operations.ProxyPATCHNodeAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PATCH requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPATCHNodeAsync(this IKubernetes operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPATCHNodeWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy GET requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyGETNodeWithPath(this IKubernetes operations, string name, string path)
            {
                return operations.ProxyGETNodeWithPathAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy GET requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyGETNodeWithPathAsync(this IKubernetes operations, string name, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyGETNodeWithPathWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PUT requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPUTNodeWithPath(this IKubernetes operations, string name, string path)
            {
                return operations.ProxyPUTNodeWithPathAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PUT requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPUTNodeWithPathAsync(this IKubernetes operations, string name, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPUTNodeWithPathWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy POST requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPOSTNodeWithPath(this IKubernetes operations, string name, string path)
            {
                return operations.ProxyPOSTNodeWithPathAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy POST requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPOSTNodeWithPathAsync(this IKubernetes operations, string name, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPOSTNodeWithPathWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy DELETE requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyDELETENodeWithPath(this IKubernetes operations, string name, string path)
            {
                return operations.ProxyDELETENodeWithPathAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy DELETE requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyDELETENodeWithPathAsync(this IKubernetes operations, string name, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyDELETENodeWithPathWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy HEAD requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyHEADNodeWithPath(this IKubernetes operations, string name, string path)
            {
                return operations.ProxyHEADNodeWithPathAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy HEAD requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyHEADNodeWithPathAsync(this IKubernetes operations, string name, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyHEADNodeWithPathWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// proxy PATCH requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            public static string ProxyPATCHNodeWithPath(this IKubernetes operations, string name, string path)
            {
                return operations.ProxyPATCHNodeWithPathAsync(name, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// proxy PATCH requests to Node
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Node
            /// </param>
            /// <param name='path'>
            /// path to the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProxyPATCHNodeWithPathAsync(this IKubernetes operations, string name, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProxyPATCHNodeWithPathWithHttpMessagesAsync(name, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1ReplicationControllerList ListReplicationControllerForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListReplicationControllerForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ReplicationController
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ReplicationControllerList> ListReplicationControllerForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReplicationControllerForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1ResourceQuotaList ListResourceQuotaForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListResourceQuotaForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ResourceQuota
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ResourceQuotaList> ListResourceQuotaForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListResourceQuotaForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1SecretList ListSecretForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListSecretForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1SecretList> ListSecretForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSecretForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1ServiceAccountList ListServiceAccountForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListServiceAccountForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ServiceAccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceAccountList> ListServiceAccountForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListServiceAccountForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1ServiceList ListServiceForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListServiceForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1ServiceList> ListServiceForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListServiceForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroupList GetAPIVersions1(this IKubernetes operations)
            {
                return operations.GetAPIVersions1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available API versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroupList> GetAPIVersions1Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIVersions1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup(this IKubernetes operations)
            {
                return operations.GetAPIGroupAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroupAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources1(this IKubernetes operations)
            {
                return operations.GetAPIResources1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources1Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static Appsv1beta1DeploymentList ListDeploymentForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListDeploymentForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1DeploymentList> ListDeploymentForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1DeploymentList ListNamespacedDeployment(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedDeploymentAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1DeploymentList> ListNamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment CreateNamespacedDeployment(this IKubernetes operations, Appsv1beta1Deployment body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedDeploymentAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> CreateNamespacedDeploymentAsync(this IKubernetes operations, Appsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedDeployment(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedDeploymentAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedDeploymentAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment ReadNamespacedDeployment(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedDeploymentAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> ReadNamespacedDeploymentAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment ReplaceNamespacedDeployment(this IKubernetes operations, Appsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDeploymentAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> ReplaceNamespacedDeploymentAsync(this IKubernetes operations, Appsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedDeployment(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedDeploymentAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedDeploymentAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment PatchNamespacedDeployment(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDeploymentAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> PatchNamespacedDeploymentAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create rollback of a DeploymentRollback
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DeploymentRollback
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1DeploymentRollback CreateNamespacedDeploymentRollbackRollback(this IKubernetes operations, Appsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedDeploymentRollbackRollbackAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create rollback of a DeploymentRollback
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DeploymentRollback
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1DeploymentRollback> CreateNamespacedDeploymentRollbackRollbackAsync(this IKubernetes operations, Appsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedDeploymentRollbackRollbackWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Scale ReadNamespacedScaleScale1(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedScaleScale1Async(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Scale> ReadNamespacedScaleScale1Async(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedScaleScale1WithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Scale ReplaceNamespacedScaleScale1(this IKubernetes operations, Appsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedScaleScale1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Scale> ReplaceNamespacedScaleScale1Async(this IKubernetes operations, Appsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedScaleScale1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Scale PatchNamespacedScaleScale1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedScaleScale1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Scale> PatchNamespacedScaleScale1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedScaleScale1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment ReadNamespacedDeploymentStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedDeploymentStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> ReadNamespacedDeploymentStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment ReplaceNamespacedDeploymentStatus(this IKubernetes operations, Appsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDeploymentStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> ReplaceNamespacedDeploymentStatusAsync(this IKubernetes operations, Appsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Appsv1beta1Deployment PatchNamespacedDeploymentStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDeploymentStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Appsv1beta1Deployment> PatchNamespacedDeploymentStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSetList ListNamespacedStatefulSet(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedStatefulSetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSetList> ListNamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet CreateNamespacedStatefulSet(this IKubernetes operations, V1beta1StatefulSet body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedStatefulSetAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> CreateNamespacedStatefulSetAsync(this IKubernetes operations, V1beta1StatefulSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedStatefulSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedStatefulSet(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedStatefulSetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedStatefulSetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet ReadNamespacedStatefulSet(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedStatefulSetAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> ReadNamespacedStatefulSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet ReplaceNamespacedStatefulSet(this IKubernetes operations, V1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedStatefulSetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> ReplaceNamespacedStatefulSetAsync(this IKubernetes operations, V1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedStatefulSet(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedStatefulSetAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedStatefulSetAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet PatchNamespacedStatefulSet(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedStatefulSetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> PatchNamespacedStatefulSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet ReadNamespacedStatefulSetStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedStatefulSetStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> ReadNamespacedStatefulSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedStatefulSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet ReplaceNamespacedStatefulSetStatus(this IKubernetes operations, V1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedStatefulSetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> ReplaceNamespacedStatefulSetStatusAsync(this IKubernetes operations, V1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StatefulSet PatchNamespacedStatefulSetStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedStatefulSetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StatefulSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSet> PatchNamespacedStatefulSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1StatefulSetList ListStatefulSetForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListStatefulSetForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind StatefulSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StatefulSetList> ListStatefulSetForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatefulSetForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup1(this IKubernetes operations)
            {
                return operations.GetAPIGroup1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup1Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources2(this IKubernetes operations)
            {
                return operations.GetAPIResources2Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources2Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources2WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a TokenReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1TokenReview CreateTokenReview(this IKubernetes operations, V1TokenReview body, string pretty = default(string))
            {
                return operations.CreateTokenReviewAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a TokenReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1TokenReview> CreateTokenReviewAsync(this IKubernetes operations, V1TokenReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTokenReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources3(this IKubernetes operations)
            {
                return operations.GetAPIResources3Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources3Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources3WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a TokenReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1TokenReview CreateTokenReview1(this IKubernetes operations, V1beta1TokenReview body, string pretty = default(string))
            {
                return operations.CreateTokenReview1Async(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a TokenReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1TokenReview> CreateTokenReview1Async(this IKubernetes operations, V1beta1TokenReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTokenReview1WithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup2(this IKubernetes operations)
            {
                return operations.GetAPIGroup2Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup2Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup2WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources4(this IKubernetes operations)
            {
                return operations.GetAPIResources4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources4Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a LocalSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1LocalSubjectAccessReview CreateNamespacedLocalSubjectAccessReview(this IKubernetes operations, V1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedLocalSubjectAccessReviewAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a LocalSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1LocalSubjectAccessReview> CreateNamespacedLocalSubjectAccessReviewAsync(this IKubernetes operations, V1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SelfSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1SelfSubjectAccessReview CreateSelfSubjectAccessReview(this IKubernetes operations, V1SelfSubjectAccessReview body, string pretty = default(string))
            {
                return operations.CreateSelfSubjectAccessReviewAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a SelfSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1SelfSubjectAccessReview> CreateSelfSubjectAccessReviewAsync(this IKubernetes operations, V1SelfSubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSelfSubjectAccessReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1SubjectAccessReview CreateSubjectAccessReview(this IKubernetes operations, V1SubjectAccessReview body, string pretty = default(string))
            {
                return operations.CreateSubjectAccessReviewAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a SubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1SubjectAccessReview> CreateSubjectAccessReviewAsync(this IKubernetes operations, V1SubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubjectAccessReviewWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources5(this IKubernetes operations)
            {
                return operations.GetAPIResources5Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources5Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources5WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a LocalSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1LocalSubjectAccessReview CreateNamespacedLocalSubjectAccessReview1(this IKubernetes operations, V1beta1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedLocalSubjectAccessReview1Async(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a LocalSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1LocalSubjectAccessReview> CreateNamespacedLocalSubjectAccessReview1Async(this IKubernetes operations, V1beta1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedLocalSubjectAccessReview1WithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SelfSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1SelfSubjectAccessReview CreateSelfSubjectAccessReview1(this IKubernetes operations, V1beta1SelfSubjectAccessReview body, string pretty = default(string))
            {
                return operations.CreateSelfSubjectAccessReview1Async(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a SelfSubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1SelfSubjectAccessReview> CreateSelfSubjectAccessReview1Async(this IKubernetes operations, V1beta1SelfSubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSelfSubjectAccessReview1WithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a SubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1SubjectAccessReview CreateSubjectAccessReview1(this IKubernetes operations, V1beta1SubjectAccessReview body, string pretty = default(string))
            {
                return operations.CreateSubjectAccessReview1Async(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a SubjectAccessReview
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1SubjectAccessReview> CreateSubjectAccessReview1Async(this IKubernetes operations, V1beta1SubjectAccessReview body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubjectAccessReview1WithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup3(this IKubernetes operations)
            {
                return operations.GetAPIGroup3Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup3Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup3WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources6(this IKubernetes operations)
            {
                return operations.GetAPIResources6Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources6Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources6WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1HorizontalPodAutoscalerList ListHorizontalPodAutoscalerForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListHorizontalPodAutoscalerForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscalerList> ListHorizontalPodAutoscalerForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedHorizontalPodAutoscalerAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler(this IKubernetes operations, V1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedHorizontalPodAutoscalerAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, V1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedHorizontalPodAutoscaler(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedHorizontalPodAutoscalerAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedHorizontalPodAutoscalerAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler(this IKubernetes operations, V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedHorizontalPodAutoscalerAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedHorizontalPodAutoscaler(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedHorizontalPodAutoscalerAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedHorizontalPodAutoscalerAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscalerStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedHorizontalPodAutoscalerStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus(this IKubernetes operations, V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedHorizontalPodAutoscalerStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscalerStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedHorizontalPodAutoscalerStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources7(this IKubernetes operations)
            {
                return operations.GetAPIResources7Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources7Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources7WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V2alpha1HorizontalPodAutoscalerList ListHorizontalPodAutoscalerForAllNamespaces1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListHorizontalPodAutoscalerForAllNamespaces1Async(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscalerList> ListHorizontalPodAutoscalerForAllNamespaces1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHorizontalPodAutoscalerForAllNamespaces1WithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedHorizontalPodAutoscaler1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, V2alpha1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedHorizontalPodAutoscaler1Async(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, V2alpha1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedHorizontalPodAutoscaler1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedHorizontalPodAutoscaler1Async(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, V2alpha1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedHorizontalPodAutoscaler1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, V2alpha1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedHorizontalPodAutoscaler1Async(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedHorizontalPodAutoscaler1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscaler1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscalerStatus1(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedHorizontalPodAutoscalerStatus1Async(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerStatus1Async(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus1(this IKubernetes operations, V2alpha1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedHorizontalPodAutoscalerStatus1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatus1Async(this IKubernetes operations, V2alpha1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscalerStatus1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedHorizontalPodAutoscalerStatus1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified HorizontalPodAutoscaler
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the HorizontalPodAutoscaler
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerStatus1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup4(this IKubernetes operations)
            {
                return operations.GetAPIGroup4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup4Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources8(this IKubernetes operations)
            {
                return operations.GetAPIResources8Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources8Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources8WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1JobList ListJobForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListJobForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1JobList> ListJobForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1JobList ListNamespacedJob(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedJobAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1JobList> ListNamespacedJobAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedJobWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job CreateNamespacedJob(this IKubernetes operations, V1Job body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedJobAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> CreateNamespacedJobAsync(this IKubernetes operations, V1Job body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedJobWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedJob(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedJobAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedJobAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedJobWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job ReadNamespacedJob(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedJobAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> ReadNamespacedJobAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job ReplaceNamespacedJob(this IKubernetes operations, V1Job body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedJobAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> ReplaceNamespacedJobAsync(this IKubernetes operations, V1Job body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedJob(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedJobAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedJobAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job PatchNamespacedJob(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedJobAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> PatchNamespacedJobAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job ReadNamespacedJobStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedJobStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> ReadNamespacedJobStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job ReplaceNamespacedJobStatus(this IKubernetes operations, V1Job body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedJobStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> ReplaceNamespacedJobStatusAsync(this IKubernetes operations, V1Job body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Job PatchNamespacedJobStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedJobStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Job
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Job> PatchNamespacedJobStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources9(this IKubernetes operations)
            {
                return operations.GetAPIResources9Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources9Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources9WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V2alpha1CronJobList ListCronJobForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListCronJobForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJobList> ListCronJobForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCronJobForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJobList ListNamespacedCronJob(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedCronJobAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJobList> ListNamespacedCronJobAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob CreateNamespacedCronJob(this IKubernetes operations, V2alpha1CronJob body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedCronJobAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> CreateNamespacedCronJobAsync(this IKubernetes operations, V2alpha1CronJob body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedCronJobWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedCronJob(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedCronJobAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedCronJobAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReadNamespacedCronJob(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedCronJobAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReadNamespacedCronJobAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReplaceNamespacedCronJob(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedCronJobAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReplaceNamespacedCronJobAsync(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedCronJob(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedCronJobAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedCronJobAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob PatchNamespacedCronJob(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedCronJobAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> PatchNamespacedCronJobAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReadNamespacedCronJobStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedCronJobStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReadNamespacedCronJobStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedCronJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReplaceNamespacedCronJobStatus(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedCronJobStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReplaceNamespacedCronJobStatusAsync(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob PatchNamespacedCronJobStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedCronJobStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified CronJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CronJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> PatchNamespacedCronJobStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJobList ListNamespacedScheduledJob(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedScheduledJobAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJobList> ListNamespacedScheduledJobAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedScheduledJobWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob CreateNamespacedScheduledJob(this IKubernetes operations, V2alpha1CronJob body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedScheduledJobAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> CreateNamespacedScheduledJobAsync(this IKubernetes operations, V2alpha1CronJob body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedScheduledJobWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedScheduledJob(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedScheduledJobAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedScheduledJobAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedScheduledJobWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReadNamespacedScheduledJob(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedScheduledJobAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReadNamespacedScheduledJobAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedScheduledJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReplaceNamespacedScheduledJob(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedScheduledJobAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReplaceNamespacedScheduledJobAsync(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedScheduledJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedScheduledJob(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedScheduledJobAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedScheduledJobAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedScheduledJobWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob PatchNamespacedScheduledJob(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedScheduledJobAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> PatchNamespacedScheduledJobAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedScheduledJobWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReadNamespacedScheduledJobStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedScheduledJobStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReadNamespacedScheduledJobStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedScheduledJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob ReplaceNamespacedScheduledJobStatus(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedScheduledJobStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> ReplaceNamespacedScheduledJobStatusAsync(this IKubernetes operations, V2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedScheduledJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V2alpha1CronJob PatchNamespacedScheduledJobStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedScheduledJobStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ScheduledJob
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJob> PatchNamespacedScheduledJobStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedScheduledJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V2alpha1CronJobList ListScheduledJobForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListScheduledJobForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ScheduledJob
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V2alpha1CronJobList> ListScheduledJobForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListScheduledJobForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup5(this IKubernetes operations)
            {
                return operations.GetAPIGroup5Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup5Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup5WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources10(this IKubernetes operations)
            {
                return operations.GetAPIResources10Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources10Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources10WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequestList ListCertificateSigningRequest(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListCertificateSigningRequestAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequestList> ListCertificateSigningRequestAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificateSigningRequestWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequest CreateCertificateSigningRequest(this IKubernetes operations, V1beta1CertificateSigningRequest body, string pretty = default(string))
            {
                return operations.CreateCertificateSigningRequestAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequest> CreateCertificateSigningRequestAsync(this IKubernetes operations, V1beta1CertificateSigningRequest body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateSigningRequestWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionCertificateSigningRequest(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionCertificateSigningRequestAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionCertificateSigningRequestAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionCertificateSigningRequestWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequest ReadCertificateSigningRequest(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadCertificateSigningRequestAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequest> ReadCertificateSigningRequestAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCertificateSigningRequestWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequest ReplaceCertificateSigningRequest(this IKubernetes operations, V1beta1CertificateSigningRequest body, string name, string pretty = default(string))
            {
                return operations.ReplaceCertificateSigningRequestAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequest> ReplaceCertificateSigningRequestAsync(this IKubernetes operations, V1beta1CertificateSigningRequest body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCertificateSigningRequestWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCertificateSigningRequest(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteCertificateSigningRequestAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCertificateSigningRequestAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateSigningRequestWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequest PatchCertificateSigningRequest(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchCertificateSigningRequestAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequest> PatchCertificateSigningRequestAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchCertificateSigningRequestWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace approval of the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequest ReplaceCertificateSigningRequestApproval(this IKubernetes operations, V1beta1CertificateSigningRequest body, string name, string pretty = default(string))
            {
                return operations.ReplaceCertificateSigningRequestApprovalAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace approval of the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequest> ReplaceCertificateSigningRequestApprovalAsync(this IKubernetes operations, V1beta1CertificateSigningRequest body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCertificateSigningRequestApprovalWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1CertificateSigningRequest ReplaceCertificateSigningRequestStatus(this IKubernetes operations, V1beta1CertificateSigningRequest body, string name, string pretty = default(string))
            {
                return operations.ReplaceCertificateSigningRequestStatusAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified CertificateSigningRequest
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the CertificateSigningRequest
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1CertificateSigningRequest> ReplaceCertificateSigningRequestStatusAsync(this IKubernetes operations, V1beta1CertificateSigningRequest body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceCertificateSigningRequestStatusWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup6(this IKubernetes operations)
            {
                return operations.GetAPIGroup6Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup6Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup6WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources11(this IKubernetes operations)
            {
                return operations.GetAPIResources11Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources11Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources11WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1DaemonSetList ListDaemonSetForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListDaemonSetForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSetList> ListDaemonSetForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDaemonSetForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static Extensionsv1beta1DeploymentList ListDeploymentForAllNamespaces1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListDeploymentForAllNamespaces1Async(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1DeploymentList> ListDeploymentForAllNamespaces1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentForAllNamespaces1WithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1IngressList ListIngressForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListIngressForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1IngressList> ListIngressForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListIngressForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSetList ListNamespacedDaemonSet(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedDaemonSetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSetList> ListNamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet CreateNamespacedDaemonSet(this IKubernetes operations, V1beta1DaemonSet body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedDaemonSetAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> CreateNamespacedDaemonSetAsync(this IKubernetes operations, V1beta1DaemonSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedDaemonSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedDaemonSet(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedDaemonSetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedDaemonSetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet ReadNamespacedDaemonSet(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedDaemonSetAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> ReadNamespacedDaemonSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet ReplaceNamespacedDaemonSet(this IKubernetes operations, V1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDaemonSetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> ReplaceNamespacedDaemonSetAsync(this IKubernetes operations, V1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedDaemonSet(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedDaemonSetAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedDaemonSetAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet PatchNamespacedDaemonSet(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDaemonSetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> PatchNamespacedDaemonSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet ReadNamespacedDaemonSetStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedDaemonSetStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> ReadNamespacedDaemonSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDaemonSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet ReplaceNamespacedDaemonSetStatus(this IKubernetes operations, V1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDaemonSetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> ReplaceNamespacedDaemonSetStatusAsync(this IKubernetes operations, V1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1DaemonSet PatchNamespacedDaemonSetStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDaemonSetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified DaemonSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DaemonSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1DaemonSet> PatchNamespacedDaemonSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1DeploymentList ListNamespacedDeployment1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedDeployment1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1DeploymentList> ListNamespacedDeployment1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedDeployment1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment CreateNamespacedDeployment1(this IKubernetes operations, Extensionsv1beta1Deployment body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedDeployment1Async(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> CreateNamespacedDeployment1Async(this IKubernetes operations, Extensionsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedDeployment1WithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedDeployment1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedDeployment1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedDeployment1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedDeployment1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment ReadNamespacedDeployment1(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedDeployment1Async(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> ReadNamespacedDeployment1Async(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDeployment1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment ReplaceNamespacedDeployment1(this IKubernetes operations, Extensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDeployment1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> ReplaceNamespacedDeployment1Async(this IKubernetes operations, Extensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDeployment1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedDeployment1(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedDeployment1Async(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedDeployment1Async(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedDeployment1WithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment PatchNamespacedDeployment1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDeployment1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> PatchNamespacedDeployment1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDeployment1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create rollback of a DeploymentRollback
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DeploymentRollback
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1DeploymentRollback CreateNamespacedDeploymentRollbackRollback1(this IKubernetes operations, Extensionsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedDeploymentRollbackRollback1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create rollback of a DeploymentRollback
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the DeploymentRollback
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1DeploymentRollback> CreateNamespacedDeploymentRollbackRollback1Async(this IKubernetes operations, Extensionsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedDeploymentRollbackRollback1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale ReadNamespacedDeploymentsScale(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedDeploymentsScaleAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> ReadNamespacedDeploymentsScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDeploymentsScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale ReplaceNamespacedDeploymentsScale(this IKubernetes operations, Extensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDeploymentsScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> ReplaceNamespacedDeploymentsScaleAsync(this IKubernetes operations, Extensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDeploymentsScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale PatchNamespacedDeploymentsScale(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDeploymentsScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> PatchNamespacedDeploymentsScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDeploymentsScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment ReadNamespacedDeploymentStatus1(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedDeploymentStatus1Async(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> ReadNamespacedDeploymentStatus1Async(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedDeploymentStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment ReplaceNamespacedDeploymentStatus1(this IKubernetes operations, Extensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedDeploymentStatus1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> ReplaceNamespacedDeploymentStatus1Async(this IKubernetes operations, Extensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedDeploymentStatus1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Deployment PatchNamespacedDeploymentStatus1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedDeploymentStatus1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Deployment
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Deployment> PatchNamespacedDeploymentStatus1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedDeploymentStatus1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1IngressList ListNamespacedIngress(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedIngressAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1IngressList> ListNamespacedIngressAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedIngressWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress CreateNamespacedIngress(this IKubernetes operations, V1beta1Ingress body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedIngressAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> CreateNamespacedIngressAsync(this IKubernetes operations, V1beta1Ingress body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedIngressWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedIngress(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedIngressAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedIngressAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedIngressWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress ReadNamespacedIngress(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedIngressAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> ReadNamespacedIngressAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress ReplaceNamespacedIngress(this IKubernetes operations, V1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedIngressAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> ReplaceNamespacedIngressAsync(this IKubernetes operations, V1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedIngress(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedIngressAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete an Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedIngressAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress PatchNamespacedIngress(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedIngressAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> PatchNamespacedIngressAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress ReadNamespacedIngressStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedIngressStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> ReadNamespacedIngressStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedIngressStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress ReplaceNamespacedIngressStatus(this IKubernetes operations, V1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedIngressStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> ReplaceNamespacedIngressStatusAsync(this IKubernetes operations, V1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Ingress PatchNamespacedIngressStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedIngressStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified Ingress
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Ingress
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Ingress> PatchNamespacedIngressStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1NetworkPolicyList ListNamespacedNetworkPolicy(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedNetworkPolicyAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1NetworkPolicyList> ListNamespacedNetworkPolicyAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1NetworkPolicy CreateNamespacedNetworkPolicy(this IKubernetes operations, V1beta1NetworkPolicy body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedNetworkPolicyAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1NetworkPolicy> CreateNamespacedNetworkPolicyAsync(this IKubernetes operations, V1beta1NetworkPolicy body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedNetworkPolicyWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedNetworkPolicy(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedNetworkPolicyAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedNetworkPolicyAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1NetworkPolicy ReadNamespacedNetworkPolicy(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedNetworkPolicyAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1NetworkPolicy> ReadNamespacedNetworkPolicyAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1NetworkPolicy ReplaceNamespacedNetworkPolicy(this IKubernetes operations, V1beta1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedNetworkPolicyAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1NetworkPolicy> ReplaceNamespacedNetworkPolicyAsync(this IKubernetes operations, V1beta1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedNetworkPolicy(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedNetworkPolicyAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedNetworkPolicyAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1NetworkPolicy PatchNamespacedNetworkPolicy(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedNetworkPolicyAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the NetworkPolicy
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1NetworkPolicy> PatchNamespacedNetworkPolicyAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSetList ListNamespacedReplicaSet(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedReplicaSetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSetList> ListNamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet CreateNamespacedReplicaSet(this IKubernetes operations, V1beta1ReplicaSet body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedReplicaSetAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> CreateNamespacedReplicaSetAsync(this IKubernetes operations, V1beta1ReplicaSet body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedReplicaSetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedReplicaSet(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedReplicaSetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedReplicaSetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet ReadNamespacedReplicaSet(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedReplicaSetAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> ReadNamespacedReplicaSetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet ReplaceNamespacedReplicaSet(this IKubernetes operations, V1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedReplicaSetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetAsync(this IKubernetes operations, V1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedReplicaSet(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedReplicaSetAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedReplicaSetAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet PatchNamespacedReplicaSet(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedReplicaSetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> PatchNamespacedReplicaSetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale ReadNamespacedReplicasetsScale(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedReplicasetsScaleAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> ReadNamespacedReplicasetsScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedReplicasetsScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale ReplaceNamespacedReplicasetsScale(this IKubernetes operations, Extensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedReplicasetsScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> ReplaceNamespacedReplicasetsScaleAsync(this IKubernetes operations, Extensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedReplicasetsScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale PatchNamespacedReplicasetsScale(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedReplicasetsScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> PatchNamespacedReplicasetsScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedReplicasetsScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet ReadNamespacedReplicaSetStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedReplicaSetStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> ReadNamespacedReplicaSetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedReplicaSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet ReplaceNamespacedReplicaSetStatus(this IKubernetes operations, V1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedReplicaSetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetStatusAsync(this IKubernetes operations, V1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ReplicaSet PatchNamespacedReplicaSetStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedReplicaSetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ReplicaSet
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSet> PatchNamespacedReplicaSetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale ReadNamespacedReplicationcontrollersScale(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedReplicationcontrollersScaleAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> ReadNamespacedReplicationcontrollersScaleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedReplicationcontrollersScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale ReplaceNamespacedReplicationcontrollersScale(this IKubernetes operations, Extensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedReplicationcontrollersScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> ReplaceNamespacedReplicationcontrollersScaleAsync(this IKubernetes operations, Extensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedReplicationcontrollersScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static Extensionsv1beta1Scale PatchNamespacedReplicationcontrollersScale(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedReplicationcontrollersScaleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update scale of the specified Scale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Scale
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extensionsv1beta1Scale> PatchNamespacedReplicationcontrollersScaleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedReplicationcontrollersScaleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1NetworkPolicyList ListNetworkPolicyForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListNetworkPolicyForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind NetworkPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1NetworkPolicyList> ListNetworkPolicyForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkPolicyForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodSecurityPolicyList ListPodSecurityPolicy(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListPodSecurityPolicyAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodSecurityPolicyList> ListPodSecurityPolicyAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPodSecurityPolicyWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodSecurityPolicy CreatePodSecurityPolicy(this IKubernetes operations, V1beta1PodSecurityPolicy body, string pretty = default(string))
            {
                return operations.CreatePodSecurityPolicyAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodSecurityPolicy> CreatePodSecurityPolicyAsync(this IKubernetes operations, V1beta1PodSecurityPolicy body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePodSecurityPolicyWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionPodSecurityPolicy(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionPodSecurityPolicyAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionPodSecurityPolicyAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionPodSecurityPolicyWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodSecurityPolicy ReadPodSecurityPolicy(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadPodSecurityPolicyAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodSecurityPolicy> ReadPodSecurityPolicyAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadPodSecurityPolicyWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodSecurityPolicy ReplacePodSecurityPolicy(this IKubernetes operations, V1beta1PodSecurityPolicy body, string name, string pretty = default(string))
            {
                return operations.ReplacePodSecurityPolicyAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodSecurityPolicy> ReplacePodSecurityPolicyAsync(this IKubernetes operations, V1beta1PodSecurityPolicy body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplacePodSecurityPolicyWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeletePodSecurityPolicy(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeletePodSecurityPolicyAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeletePodSecurityPolicyAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePodSecurityPolicyWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodSecurityPolicy PatchPodSecurityPolicy(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchPodSecurityPolicyAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified PodSecurityPolicy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodSecurityPolicy
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodSecurityPolicy> PatchPodSecurityPolicyAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchPodSecurityPolicyWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1ReplicaSetList ListReplicaSetForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListReplicaSetForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ReplicaSet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ReplicaSetList> ListReplicaSetForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReplicaSetForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ThirdPartyResourceList ListThirdPartyResource(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListThirdPartyResourceAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ThirdPartyResourceList> ListThirdPartyResourceAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListThirdPartyResourceWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ThirdPartyResource CreateThirdPartyResource(this IKubernetes operations, V1beta1ThirdPartyResource body, string pretty = default(string))
            {
                return operations.CreateThirdPartyResourceAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ThirdPartyResource> CreateThirdPartyResourceAsync(this IKubernetes operations, V1beta1ThirdPartyResource body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateThirdPartyResourceWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionThirdPartyResource(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionThirdPartyResourceAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionThirdPartyResourceAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionThirdPartyResourceWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ThirdPartyResource ReadThirdPartyResource(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadThirdPartyResourceAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ThirdPartyResource> ReadThirdPartyResourceAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadThirdPartyResourceWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ThirdPartyResource ReplaceThirdPartyResource(this IKubernetes operations, V1beta1ThirdPartyResource body, string name, string pretty = default(string))
            {
                return operations.ReplaceThirdPartyResourceAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ThirdPartyResource> ReplaceThirdPartyResourceAsync(this IKubernetes operations, V1beta1ThirdPartyResource body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceThirdPartyResourceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteThirdPartyResource(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteThirdPartyResourceAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteThirdPartyResourceAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteThirdPartyResourceWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ThirdPartyResource PatchThirdPartyResource(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchThirdPartyResourceAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ThirdPartyResource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ThirdPartyResource
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ThirdPartyResource> PatchThirdPartyResourceAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchThirdPartyResourceWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup7(this IKubernetes operations)
            {
                return operations.GetAPIGroup7Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup7Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup7WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources12(this IKubernetes operations)
            {
                return operations.GetAPIResources12Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources12Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources12WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudgetList ListNamespacedPodDisruptionBudget(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedPodDisruptionBudgetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudgetList> ListNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget CreateNamespacedPodDisruptionBudget(this IKubernetes operations, V1beta1PodDisruptionBudget body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedPodDisruptionBudgetAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> CreateNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, V1beta1PodDisruptionBudget body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedPodDisruptionBudget(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedPodDisruptionBudgetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget ReadNamespacedPodDisruptionBudget(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedPodDisruptionBudgetAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> ReadNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget ReplaceNamespacedPodDisruptionBudget(this IKubernetes operations, V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPodDisruptionBudgetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> ReplaceNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedPodDisruptionBudget(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedPodDisruptionBudgetAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget PatchNamespacedPodDisruptionBudget(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPodDisruptionBudgetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> PatchNamespacedPodDisruptionBudgetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget ReadNamespacedPodDisruptionBudgetStatus(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedPodDisruptionBudgetStatusAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> ReadNamespacedPodDisruptionBudgetStatusAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget ReplaceNamespacedPodDisruptionBudgetStatus(this IKubernetes operations, V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPodDisruptionBudgetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> ReplaceNamespacedPodDisruptionBudgetStatusAsync(this IKubernetes operations, V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1PodDisruptionBudget PatchNamespacedPodDisruptionBudgetStatus(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPodDisruptionBudgetStatusAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update status of the specified PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodDisruptionBudget
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudget> PatchNamespacedPodDisruptionBudgetStatusAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1PodDisruptionBudgetList ListPodDisruptionBudgetForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListPodDisruptionBudgetForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodDisruptionBudget
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1PodDisruptionBudgetList> ListPodDisruptionBudgetForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup8(this IKubernetes operations)
            {
                return operations.GetAPIGroup8Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup8Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup8WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources13(this IKubernetes operations)
            {
                return operations.GetAPIResources13Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources13Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources13WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRoleBindingList ListClusterRoleBinding(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListClusterRoleBindingAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRoleBindingList> ListClusterRoleBindingAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListClusterRoleBindingWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRoleBinding CreateClusterRoleBinding(this IKubernetes operations, V1alpha1ClusterRoleBinding body, string pretty = default(string))
            {
                return operations.CreateClusterRoleBindingAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRoleBinding> CreateClusterRoleBindingAsync(this IKubernetes operations, V1alpha1ClusterRoleBinding body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateClusterRoleBindingWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionClusterRoleBinding(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionClusterRoleBindingAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionClusterRoleBindingAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionClusterRoleBindingWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRoleBinding ReadClusterRoleBinding(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadClusterRoleBindingAsync(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRoleBinding> ReadClusterRoleBindingAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadClusterRoleBindingWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRoleBinding ReplaceClusterRoleBinding(this IKubernetes operations, V1alpha1ClusterRoleBinding body, string name, string pretty = default(string))
            {
                return operations.ReplaceClusterRoleBindingAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRoleBinding> ReplaceClusterRoleBindingAsync(this IKubernetes operations, V1alpha1ClusterRoleBinding body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteClusterRoleBinding(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteClusterRoleBindingAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteClusterRoleBindingAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteClusterRoleBindingWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRoleBinding PatchClusterRoleBinding(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchClusterRoleBindingAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRoleBinding> PatchClusterRoleBindingAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchClusterRoleBindingWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRoleList ListClusterRole(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListClusterRoleAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRoleList> ListClusterRoleAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListClusterRoleWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRole CreateClusterRole(this IKubernetes operations, V1alpha1ClusterRole body, string pretty = default(string))
            {
                return operations.CreateClusterRoleAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRole> CreateClusterRoleAsync(this IKubernetes operations, V1alpha1ClusterRole body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateClusterRoleWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionClusterRole(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionClusterRoleAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionClusterRoleAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionClusterRoleWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRole ReadClusterRole(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadClusterRoleAsync(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRole> ReadClusterRoleAsync(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadClusterRoleWithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRole ReplaceClusterRole(this IKubernetes operations, V1alpha1ClusterRole body, string name, string pretty = default(string))
            {
                return operations.ReplaceClusterRoleAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRole> ReplaceClusterRoleAsync(this IKubernetes operations, V1alpha1ClusterRole body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteClusterRole(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteClusterRoleAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteClusterRoleAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteClusterRoleWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1ClusterRole PatchClusterRole(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchClusterRoleAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ClusterRole> PatchClusterRoleAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchClusterRoleWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1RoleBindingList ListNamespacedRoleBinding(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedRoleBindingAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleBindingList> ListNamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1RoleBinding CreateNamespacedRoleBinding(this IKubernetes operations, V1alpha1RoleBinding body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedRoleBindingAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleBinding> CreateNamespacedRoleBindingAsync(this IKubernetes operations, V1alpha1RoleBinding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedRoleBindingWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedRoleBinding(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedRoleBindingAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedRoleBindingAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1RoleBinding ReadNamespacedRoleBinding(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedRoleBindingAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleBinding> ReadNamespacedRoleBindingAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1RoleBinding ReplaceNamespacedRoleBinding(this IKubernetes operations, V1alpha1RoleBinding body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedRoleBindingAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleBinding> ReplaceNamespacedRoleBindingAsync(this IKubernetes operations, V1alpha1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedRoleBinding(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedRoleBindingAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedRoleBindingAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1RoleBinding PatchNamespacedRoleBinding(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedRoleBindingAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleBinding> PatchNamespacedRoleBindingAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1RoleList ListNamespacedRole(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedRoleAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleList> ListNamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedRoleWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1Role CreateNamespacedRole(this IKubernetes operations, V1alpha1Role body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedRoleAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Role> CreateNamespacedRoleAsync(this IKubernetes operations, V1alpha1Role body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedRoleWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedRole(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedRoleAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedRoleAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedRoleWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1Role ReadNamespacedRole(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedRoleAsync(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Role> ReadNamespacedRoleAsync(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1Role ReplaceNamespacedRole(this IKubernetes operations, V1alpha1Role body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedRoleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Role> ReplaceNamespacedRoleAsync(this IKubernetes operations, V1alpha1Role body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedRole(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedRoleAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedRoleAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1Role PatchNamespacedRole(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedRoleAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Role> PatchNamespacedRoleAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1alpha1RoleBindingList ListRoleBindingForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListRoleBindingForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleBindingList> ListRoleBindingForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRoleBindingForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1alpha1RoleList ListRoleForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListRoleForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RoleList> ListRoleForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRoleForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources14(this IKubernetes operations)
            {
                return operations.GetAPIResources14Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources14Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources14WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRoleBindingList ListClusterRoleBinding1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListClusterRoleBinding1Async(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRoleBindingList> ListClusterRoleBinding1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListClusterRoleBinding1WithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRoleBinding CreateClusterRoleBinding1(this IKubernetes operations, V1beta1ClusterRoleBinding body, string pretty = default(string))
            {
                return operations.CreateClusterRoleBinding1Async(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRoleBinding> CreateClusterRoleBinding1Async(this IKubernetes operations, V1beta1ClusterRoleBinding body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateClusterRoleBinding1WithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionClusterRoleBinding1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionClusterRoleBinding1Async(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionClusterRoleBinding1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionClusterRoleBinding1WithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRoleBinding ReadClusterRoleBinding1(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadClusterRoleBinding1Async(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRoleBinding> ReadClusterRoleBinding1Async(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadClusterRoleBinding1WithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRoleBinding ReplaceClusterRoleBinding1(this IKubernetes operations, V1beta1ClusterRoleBinding body, string name, string pretty = default(string))
            {
                return operations.ReplaceClusterRoleBinding1Async(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRoleBinding> ReplaceClusterRoleBinding1Async(this IKubernetes operations, V1beta1ClusterRoleBinding body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceClusterRoleBinding1WithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteClusterRoleBinding1(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteClusterRoleBinding1Async(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteClusterRoleBinding1Async(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteClusterRoleBinding1WithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRoleBinding PatchClusterRoleBinding1(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchClusterRoleBinding1Async(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ClusterRoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRoleBinding
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRoleBinding> PatchClusterRoleBinding1Async(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchClusterRoleBinding1WithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRoleList ListClusterRole1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListClusterRole1Async(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRoleList> ListClusterRole1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListClusterRole1WithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRole CreateClusterRole1(this IKubernetes operations, V1beta1ClusterRole body, string pretty = default(string))
            {
                return operations.CreateClusterRole1Async(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRole> CreateClusterRole1Async(this IKubernetes operations, V1beta1ClusterRole body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateClusterRole1WithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionClusterRole1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionClusterRole1Async(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionClusterRole1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionClusterRole1WithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRole ReadClusterRole1(this IKubernetes operations, string name, string pretty = default(string))
            {
                return operations.ReadClusterRole1Async(name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRole> ReadClusterRole1Async(this IKubernetes operations, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadClusterRole1WithHttpMessagesAsync(name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRole ReplaceClusterRole1(this IKubernetes operations, V1beta1ClusterRole body, string name, string pretty = default(string))
            {
                return operations.ReplaceClusterRole1Async(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRole> ReplaceClusterRole1Async(this IKubernetes operations, V1beta1ClusterRole body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceClusterRole1WithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteClusterRole1(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteClusterRole1Async(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteClusterRole1Async(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteClusterRole1WithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1ClusterRole PatchClusterRole1(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchClusterRole1Async(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified ClusterRole
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the ClusterRole
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1ClusterRole> PatchClusterRole1Async(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchClusterRole1WithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1RoleBindingList ListNamespacedRoleBinding1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedRoleBinding1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleBindingList> ListNamespacedRoleBinding1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedRoleBinding1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1RoleBinding CreateNamespacedRoleBinding1(this IKubernetes operations, V1beta1RoleBinding body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedRoleBinding1Async(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleBinding> CreateNamespacedRoleBinding1Async(this IKubernetes operations, V1beta1RoleBinding body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedRoleBinding1WithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedRoleBinding1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedRoleBinding1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedRoleBinding1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedRoleBinding1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1RoleBinding ReadNamespacedRoleBinding1(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedRoleBinding1Async(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleBinding> ReadNamespacedRoleBinding1Async(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedRoleBinding1WithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1RoleBinding ReplaceNamespacedRoleBinding1(this IKubernetes operations, V1beta1RoleBinding body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedRoleBinding1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleBinding> ReplaceNamespacedRoleBinding1Async(this IKubernetes operations, V1beta1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedRoleBinding1(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedRoleBinding1Async(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedRoleBinding1Async(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1RoleBinding PatchNamespacedRoleBinding1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedRoleBinding1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the RoleBinding
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleBinding> PatchNamespacedRoleBinding1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1RoleList ListNamespacedRole1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedRole1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleList> ListNamespacedRole1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedRole1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Role CreateNamespacedRole1(this IKubernetes operations, V1beta1Role body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedRole1Async(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Role> CreateNamespacedRole1Async(this IKubernetes operations, V1beta1Role body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedRole1WithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedRole1(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedRole1Async(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedRole1Async(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedRole1WithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Role ReadNamespacedRole1(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReadNamespacedRole1Async(name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Role> ReadNamespacedRole1Async(this IKubernetes operations, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedRole1WithHttpMessagesAsync(name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Role ReplaceNamespacedRole1(this IKubernetes operations, V1beta1Role body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedRole1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Role> ReplaceNamespacedRole1Async(this IKubernetes operations, V1beta1Role body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedRole1(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedRole1Async(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedRole1Async(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1Role PatchNamespacedRole1(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedRole1Async(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the Role
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1Role> PatchNamespacedRole1Async(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1RoleBindingList ListRoleBindingForAllNamespaces1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListRoleBindingForAllNamespaces1Async(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind RoleBinding
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleBindingList> ListRoleBindingForAllNamespaces1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRoleBindingForAllNamespaces1WithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1beta1RoleList ListRoleForAllNamespaces1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListRoleForAllNamespaces1Async(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind Role
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1RoleList> ListRoleForAllNamespaces1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRoleForAllNamespaces1WithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup9(this IKubernetes operations)
            {
                return operations.GetAPIGroup9Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup9Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup9WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources15(this IKubernetes operations)
            {
                return operations.GetAPIResources15Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources15Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources15WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1PodPresetList ListNamespacedPodPreset(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListNamespacedPodPresetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1PodPresetList> ListNamespacedPodPresetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNamespacedPodPresetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1PodPreset CreateNamespacedPodPreset(this IKubernetes operations, V1alpha1PodPreset body, string namespaceParameter, string pretty = default(string))
            {
                return operations.CreateNamespacedPodPresetAsync(body, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1PodPreset> CreateNamespacedPodPresetAsync(this IKubernetes operations, V1alpha1PodPreset body, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNamespacedPodPresetWithHttpMessagesAsync(body, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionNamespacedPodPreset(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionNamespacedPodPresetAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionNamespacedPodPresetAsync(this IKubernetes operations, string namespaceParameter, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionNamespacedPodPresetWithHttpMessagesAsync(namespaceParameter, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1PodPreset ReadNamespacedPodPreset(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadNamespacedPodPresetAsync(name, namespaceParameter, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1PodPreset> ReadNamespacedPodPresetAsync(this IKubernetes operations, string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadNamespacedPodPresetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1PodPreset ReplaceNamespacedPodPreset(this IKubernetes operations, V1alpha1PodPreset body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.ReplaceNamespacedPodPresetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1PodPreset> ReplaceNamespacedPodPresetAsync(this IKubernetes operations, V1alpha1PodPreset body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceNamespacedPodPresetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteNamespacedPodPreset(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteNamespacedPodPresetAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteNamespacedPodPresetAsync(this IKubernetes operations, V1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNamespacedPodPresetWithHttpMessagesAsync(body, name, namespaceParameter, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1alpha1PodPreset PatchNamespacedPodPreset(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string))
            {
                return operations.PatchNamespacedPodPresetAsync(body, name, namespaceParameter, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the PodPreset
            /// </param>
            /// <param name='namespaceParameter'>
            /// object name and auth scope, such as for teams and projects
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1PodPreset> PatchNamespacedPodPresetAsync(this IKubernetes operations, object body, string name, string namespaceParameter, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchNamespacedPodPresetWithHttpMessagesAsync(body, name, namespaceParameter, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static V1alpha1PodPresetList ListPodPresetForAllNamespaces(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?))
            {
                return operations.ListPodPresetForAllNamespacesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind PodPreset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1PodPresetList> ListPodPresetForAllNamespacesAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPodPresetForAllNamespacesWithHttpMessagesAsync(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIGroup GetAPIGroup10(this IKubernetes operations)
            {
                return operations.GetAPIGroup10Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get information of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIGroup> GetAPIGroup10Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIGroup10WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources16(this IKubernetes operations)
            {
                return operations.GetAPIResources16Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources16Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources16WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1StorageClassList ListStorageClass(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListStorageClassAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1StorageClassList> ListStorageClassAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageClassWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1StorageClass CreateStorageClass(this IKubernetes operations, V1StorageClass body, string pretty = default(string))
            {
                return operations.CreateStorageClassAsync(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1StorageClass> CreateStorageClassAsync(this IKubernetes operations, V1StorageClass body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStorageClassWithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionStorageClass(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionStorageClassAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionStorageClassAsync(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionStorageClassWithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1StorageClass ReadStorageClass(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadStorageClassAsync(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1StorageClass> ReadStorageClassAsync(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadStorageClassWithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1StorageClass ReplaceStorageClass(this IKubernetes operations, V1StorageClass body, string name, string pretty = default(string))
            {
                return operations.ReplaceStorageClassAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1StorageClass> ReplaceStorageClassAsync(this IKubernetes operations, V1StorageClass body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceStorageClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteStorageClass(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteStorageClassAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteStorageClassAsync(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageClassWithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1StorageClass PatchStorageClass(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchStorageClassAsync(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1StorageClass> PatchStorageClassAsync(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchStorageClassWithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static V1APIResourceList GetAPIResources17(this IKubernetes operations)
            {
                return operations.GetAPIResources17Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get available resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1APIResourceList> GetAPIResources17Async(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAPIResources17WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list or watch objects of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StorageClassList ListStorageClass1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.ListStorageClass1Async(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list or watch objects of kind StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StorageClassList> ListStorageClass1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageClass1WithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// create a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StorageClass CreateStorageClass1(this IKubernetes operations, V1beta1StorageClass body, string pretty = default(string))
            {
                return operations.CreateStorageClass1Async(body, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StorageClass> CreateStorageClass1Async(this IKubernetes operations, V1beta1StorageClass body, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateStorageClass1WithHttpMessagesAsync(body, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete collection of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteCollectionStorageClass1(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string))
            {
                return operations.DeleteCollectionStorageClass1Async(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete collection of StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fieldSelector'>
            /// A selector to restrict the list of returned objects by their fields.
            /// Defaults to everything.
            /// </param>
            /// <param name='labelSelector'>
            /// A selector to restrict the list of returned objects by their labels.
            /// Defaults to everything.
            /// </param>
            /// <param name='resourceVersion'>
            /// When specified with a watch call, shows changes that occur after that
            /// particular version of a resource. Defaults to changes from the beginning of
            /// history. When specified for list: - if unset, then the result is returned
            /// from remote storage based on quorum-read flag; - if it's 0, then we simply
            /// return what we currently have in cache, no guarantee; - if set to non zero,
            /// then the result is at least as fresh as given rv.
            /// </param>
            /// <param name='timeoutSeconds'>
            /// Timeout for the list/watch call.
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteCollectionStorageClass1Async(this IKubernetes operations, string fieldSelector = default(string), string labelSelector = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCollectionStorageClass1WithHttpMessagesAsync(fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// read the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StorageClass ReadStorageClass1(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string))
            {
                return operations.ReadStorageClass1Async(name, exact, export, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// read the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='exact'>
            /// Should the export be exact.  Exact export maintains cluster-specific fields
            /// like 'Namespace'.
            /// </param>
            /// <param name='export'>
            /// Should this value be exported.  Export strips fields that a user can not
            /// specify.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StorageClass> ReadStorageClass1Async(this IKubernetes operations, string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadStorageClass1WithHttpMessagesAsync(name, exact, export, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// replace the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StorageClass ReplaceStorageClass1(this IKubernetes operations, V1beta1StorageClass body, string name, string pretty = default(string))
            {
                return operations.ReplaceStorageClass1Async(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// replace the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StorageClass> ReplaceStorageClass1Async(this IKubernetes operations, V1beta1StorageClass body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceStorageClass1WithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1Status DeleteStorageClass1(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string))
            {
                return operations.DeleteStorageClass1Async(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete a StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1Status> DeleteStorageClass1Async(this IKubernetes operations, V1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageClass1WithHttpMessagesAsync(body, name, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// partially update the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            public static V1beta1StorageClass PatchStorageClass1(this IKubernetes operations, object body, string name, string pretty = default(string))
            {
                return operations.PatchStorageClass1Async(body, name, pretty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// partially update the specified StorageClass
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='name'>
            /// name of the StorageClass
            /// </param>
            /// <param name='pretty'>
            /// If 'true', then the output is pretty printed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1beta1StorageClass> PatchStorageClass1Async(this IKubernetes operations, object body, string name, string pretty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchStorageClass1WithHttpMessagesAsync(body, name, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void LogFileListHandler(this IKubernetes operations)
            {
                operations.LogFileListHandlerAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LogFileListHandlerAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LogFileListHandlerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='logpath'>
            /// path to the log
            /// </param>
            public static void LogFileHandler(this IKubernetes operations, string logpath)
            {
                operations.LogFileHandlerAsync(logpath).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='logpath'>
            /// path to the log
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LogFileHandlerAsync(this IKubernetes operations, string logpath, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LogFileHandlerWithHttpMessagesAsync(logpath, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// get the code version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static VersionInfo GetCode(this IKubernetes operations)
            {
                return operations.GetCodeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get the code version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionInfo> GetCodeAsync(this IKubernetes operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCodeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Resources
            /// </summary>
            /// <remarks>
            /// Returns a list of Resources
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            public static object ListThirdPartyResource1(this IKubernetes operations, string fqdn, string resource, bool? watch = default(bool?))
            {
                return operations.ListThirdPartyResource1Async(fqdn, resource, watch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Resources
            /// </summary>
            /// <remarks>
            /// Returns a list of Resources
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='watch'>
            /// Watch for changes to the described resources and return them as a stream of
            /// add, update, and remove notifications. Specify resourceVersion.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListThirdPartyResource1Async(this IKubernetes operations, string fqdn, string resource, bool? watch = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListThirdPartyResource1WithHttpMessagesAsync(fqdn, resource, watch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Resource
            /// </summary>
            /// <remarks>
            /// Update the specified third party resource of the type specified
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// The Resource's namespace
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='body'>
            /// The JSON schema of the Resource to create.
            /// </param>
            public static object UpdateThirdPartyResource(this IKubernetes operations, string namespaceParameter, string fqdn, string resource, object body)
            {
                return operations.UpdateThirdPartyResourceAsync(namespaceParameter, fqdn, resource, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Resource
            /// </summary>
            /// <remarks>
            /// Update the specified third party resource of the type specified
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// The Resource's namespace
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='body'>
            /// The JSON schema of the Resource to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateThirdPartyResourceAsync(this IKubernetes operations, string namespaceParameter, string fqdn, string resource, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateThirdPartyResourceWithHttpMessagesAsync(namespaceParameter, fqdn, resource, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specific Resource
            /// </summary>
            /// <remarks>
            /// Deletes the specified Resource in the specified namespace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            public static object DeleteThirdPartyResource1(this IKubernetes operations, V1DeleteOptions body, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string))
            {
                return operations.DeleteThirdPartyResource1Async(body, gracePeriodSeconds, orphanDependents, propagationPolicy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specific Resource
            /// </summary>
            /// <remarks>
            /// Deletes the specified Resource in the specified namespace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='gracePeriodSeconds'>
            /// The duration in seconds before the object should be deleted. Value must be
            /// non-negative integer. The value zero indicates delete immediately. If this
            /// value is nil, the default grace period for the specified type will be used.
            /// Defaults to a per object value if not specified. zero means delete
            /// immediately.
            /// </param>
            /// <param name='orphanDependents'>
            /// Deprecated: please use the PropagationPolicy, this field will be deprecated
            /// in 1.7. Should the dependent objects be orphaned. If true/false, the
            /// "orphan" finalizer will be added to/removed from the object's finalizers
            /// list. Either this field or PropagationPolicy may be set, but not both.
            /// </param>
            /// <param name='propagationPolicy'>
            /// Whether and how garbage collection will be performed. Either this field or
            /// OrphanDependents may be set, but not both. The default policy is decided by
            /// the existing finalizer set in the metadata.finalizers and the
            /// resource-specific default policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteThirdPartyResource1Async(this IKubernetes operations, V1DeleteOptions body, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteThirdPartyResource1WithHttpMessagesAsync(body, gracePeriodSeconds, orphanDependents, propagationPolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific Resource
            /// </summary>
            /// <remarks>
            /// Returns a specific Resource in a namespace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// The Resource's namespace
            /// </param>
            /// <param name='name'>
            /// The Resource's name
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            public static object GetThirdPartyResource(this IKubernetes operations, string namespaceParameter, string name, string fqdn, string resource)
            {
                return operations.GetThirdPartyResourceAsync(namespaceParameter, name, fqdn, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific Resource
            /// </summary>
            /// <remarks>
            /// Returns a specific Resource in a namespace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// The Resource's namespace
            /// </param>
            /// <param name='name'>
            /// The Resource's name
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetThirdPartyResourceAsync(this IKubernetes operations, string namespaceParameter, string name, string fqdn, string resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThirdPartyResourceWithHttpMessagesAsync(namespaceParameter, name, fqdn, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Resource
            /// </summary>
            /// <remarks>
            /// Creates a third party resource of the type specified
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// The Resource's namespace
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='body'>
            /// The JSON schema of the Resource to create.
            /// </param>
            public static object CreateThirdPartyResource1(this IKubernetes operations, string namespaceParameter, string fqdn, string resource, object body)
            {
                return operations.CreateThirdPartyResource1Async(namespaceParameter, fqdn, resource, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Resource
            /// </summary>
            /// <remarks>
            /// Creates a third party resource of the type specified
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='namespaceParameter'>
            /// The Resource's namespace
            /// </param>
            /// <param name='fqdn'>
            /// The Third party Resource fqdn
            /// </param>
            /// <param name='resource'>
            /// The Resource type
            /// </param>
            /// <param name='body'>
            /// The JSON schema of the Resource to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateThirdPartyResource1Async(this IKubernetes operations, string namespaceParameter, string fqdn, string resource, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateThirdPartyResource1WithHttpMessagesAsync(namespaceParameter, fqdn, resource, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
